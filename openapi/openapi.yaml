openapi: "3.0.0"
info:
  title: Thoth Management API
  version: "0.1"
servers:
  - url: "/api/v1/"
paths:
  /info:
    get:
      tags: [Info]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: get_info
      summary: Get information about Thoth deployment.
      parameters:
        - name: secret
          in: query
          required: true
          description: A secret to manipulate with hardware environment information.
          schema:
            type: string
      responses:
        "200":
          description: A core information about Thoth deployment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"

  /hardware-environment:
    post:
      tags: [hardware]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: post_hardware_environment
      summary: Register the given hardware configuration.
      parameters:
        - name: secret
          in: query
          required: true
          description: A secret to obtain Thoth's deployment information.
          schema:
            type: string
      requestBody:
        required: true
        description: Body specifying hardware environment.
        content:
          application/json:
            schema:
              x-body-name: hardware_environment
              $ref: "#/components/schemas/HardwareEnvironment"
      responses:
        "201":
          description: A secret to manipulate with hardware environment information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HardwareEnvironment"
        "400":
          description: An error reported on bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HardwareEnvironmentResponseError"

    get:
      tags: [hardware]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: get_hardware_environment
      summary: Get registered hardware environments.
      parameters:
        - name: secret
          in: query
          required: true
          description: A secret to manipulate with hardware environment information.
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: Pagination.
          example: 10
          schema:
            type: integer
      responses:
        "200":
          description: The given hardware environment entry was created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HardwareEnvironmentWithId"
        "400":
          description: An error reported on bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HardwareEnvironmentResponseError"

    delete:
      tags: [hardware]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: delete_hardware_environment
      summary: Get registered hardware environments.
      parameters:
        - name: secret
          in: query
          required: true
          description: A secret to manipulate with hardware environment information.
          schema:
            type: string
        - name: id
          in: query
          required: true
          description: ID of the hardware information entry.
          example: 42
          schema:
            type: integer
      responses:
        "200":
          description: The given hardware environment entry was created.
        "400":
          description: An error reported on bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HardwareEnvironmentResponseError"

  /solver/python:
    post:
      tags: [Python Solver]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: post_solve_python
      summary: Schedule analysis for the given Python package.
      parameters:
        - name: secret
          in: query
          required: true
          description: A secret to schedule analysis of the given Python package.
          schema:
            type: string
        - name: debug
          in: query
          required: false
          description: >
            Run the given analyzer in a verbose mode so developers
            can debug analyzer.
          schema:
            type: boolean
            default: false
        - name: transitive
          in: query
          required: false
          description: >
            Do not solve just one package, but solve all the transitive
            dependencies which were not solved yet in one solver run.
          schema:
            type: boolean
            default: false
        - name: index_url
          in: query
          required: false
          description: >
            Index URL to be used for solver analysis.
          schema:
            type: string
            example: "https://pypi.org/simple"
            nullable: true
      requestBody:
        required: true
        description: Python package that should be registered.
        content:
          application/json:
            schema:
              x-body-name: python_package
              type: object
              description: A Python package.
              required:
                - package_name
              properties:
                package_name:
                  type: string
                  description: A name of the package to be registered in the system.
                  example: selinon
                version_specifier:
                  type: string
                  description: A version specifier according to PEP-440
                  example: "==1.0.0"
      responses:
        "201":
          description: The given Python package was registered and will be solved.
        "400":
          description: On invalid request.
        "202":
          description: Solvers were run.

  /solver/python/{analysis_id}:
    get:
      tags: [Python Solver]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: get_solve_python
      summary: Retrieve a solver result.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: Document id to be retrieved.
          schema:
            type: string
      responses:
        "200":
          description: Analyzer result retrieved.
          content:
            application/json:
              schema:
                type: object
                description: Result of an analysis
                required:
                  - metadata
                  - result
                properties:
                  metadata:
                    type: object
                    description: Metadata for analysis run.
                    required:
                      - analyzer
                      - analyzer_version
                      - arguments
                      - datetime
                      - distribution
                      - hostname
                      - python
                    properties:
                      analyzer:
                        type: string
                        description: Analyzer name which handled analysis.
                      analyzer_version:
                        type: string
                        description: Version of analyzer handling analysis.
                      arguments:
                        type: object
                        description: Arguments passed to analyzer.
                      datetime:
                        type: string
                        description: Date and time of analysis end in ISO format.
                      distribution:
                        type: object
                        description: >
                          Information about environment in which the analysis
                          was performed.
                        required:
                          - codename
                          - id
                          - like
                          - version
                          - version_parts
                        properties:
                          codename:
                            type: string
                            description: >
                              Codename of environment in which the analysis was perfomed.
                          id:
                            type: string
                            description: >
                              Identifier of environment in which the analysis
                              was perfomed.
                          like:
                            type: string
                            description: >
                              Similar environments in comparision to environment in
                              which the analysis was perfomed.
                          version:
                            type: string
                            description: A string representation of environment version.
                          version_parts:
                            type: object
                            description: >
                              Parts of version identifier of the analysing environment.
                            properties:
                              build_number:
                                type: string
                              major:
                                type: string
                              minor:
                                type: string
                            required:
                              - build_number
                              - major
                              - minor
                      hostname:
                        type: string
                        description: Pod name where the analysis was done.
                      python:
                        required:
                          - api_version
                          - implementation_name
                          - major
                          - minor
                          - micro
                          - releaselevel
                          - serial
                        properties:
                          api_version:
                            type: integer
                          implementation_name:
                            type: string
                            example: cpython
                          major:
                            type: integer
                          micro:
                            type: integer
                          minor:
                            type: integer
                          releaselevel:
                            type: string
                            example: final
                          serial:
                            type: integer
                  result:
                    type: object
                    description: Actual result of an analysis run.
        "202":
          description: Results are not ready yet.
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                  - parameters
                  - status
                properties:
                  error:
                    type: string
                    description: Error information for user.
                  parameters:
                    type: object
                    description: Parameters echoed back to user for debugging.
                  status:
                    type: object
                    description: Status information about the analysis run.
                    required:
                      - container
                      - exit_code
                      - finished_at
                      - reason
                      - started_at
                      - state
                    properties:
                      container:
                        type: string
                        description: SHA of container image in which the analysis is done.
                        nullable: true
                      exit_code:
                        type: integer
                        description: Return code of the process perfoming analysis.
                        nullable: true
                      finished_at:
                        type: string
                        description: >
                          Datetime in ISO format informing about when the analysis
                          has finished.
                        nullable: true
                      reason:
                        type: string
                        description: Reasoning on finished run.
                        nullable: true
                      started_at:
                        type: string
                        nullable: true
                        description: >
                          Datetime in ISO format informing about when the analysis
                          has started.
                      state:
                        type: string
                        example: terminated
                      parameters:
                        type: object
                        description: Parameters echoed back to user for debugging.
        "400":
          description: On invalid request.
          content:
            application/json:
              schema: &analysisResponseError
                type: object
                required:
                  - error
                  - parameters
                properties:
                  error:
                    type: string
                    description: Error information for user.
                  parameters:
                    type: object
                    description: Parameters echoed back to user for debugging.
        "404":
          description: The given document does not exist.
          content:
            application/json:
              schema:
                <<: *analysisResponseError

  /solver/python/{analysis_id}/log:
    get:
      tags: [Python Solver]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: get_solve_python_log
      summary: Retrieve a solver log.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of analysis for a solver run.
          schema:
            type: string
      responses:
        "200":
          description: Retrieved ecosystem solver log.
          content:
            application/json:
              schema:
                type: object
                required:
                  - log
                  - parameters
                properties:
                  log:
                    type: string
                    description: Analyzer logs printed to stdout/stderr as a plain text.
                    nullable: true
                  parameters:
                    type: object
                    description: Parameters echoed back to user for debugging.
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                <<: *analysisResponseError
        "404":
          description: The given solver log does not exist.
          content:
            application/json:
              schema:
                <<: *analysisResponseError

  /solver/python/{analysis_id}/status:
    get:
      tags: [Python Solver]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: get_solve_python_status
      summary: Show status of an ecosystem solver.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of requested ecosystem solver run.
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema: &analysisStatus
                type: object
                description: Information about the current analysis status.
                required:
                  - parameters
                  - status
                properties:
                  status:
                    type: object
                    description: Status information about the analysis run.
                    required:
                      - finished_at
                      - reason
                      - started_at
                      - state
                    properties:
                      finished_at:
                        type: string
                        description: >
                          Datetime in ISO format informing about when the analysis
                          has finished.
                        nullable: true
                      reason:
                        type: string
                        description: Reasoning on finished run.
                        nullable: true
                      started_at:
                        type: string
                        nullable: true
                        description: >
                          Datetime in ISO format informing about when the analysis
                          has started.
                      state:
                        type: string
                        example: terminated
                  parameters:
                    type: object
                    description: Parameters echoed back to user for debugging.
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                <<: *analysisResponseError

  /solver/python/unsolvable:
    post:
      tags: [Python Solver]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: schedule_solver_unsolvable
      summary: Schedule analysis of unsolvable packages for the given solver.
      parameters:
        - name: secret
          in: query
          required: true
          description: A secret to authorize operation.
          schema:
            type: string
        - name: solver_name
          in: query
          required: true
          description: Solver for which unsolved packages should be solved again.
          schema:
            type: string
      responses:
        "202":
          description: Scheduled solver jobs for unsolvable packages.
        "200":
          description: No solver jobs were run as no unsolvable packages were detected.
        "401":
          description: On invalid secret.
        "404":
          description: The given solver was not found.

  /solvers:
    get:
      tags: [Python Solver]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: list_solvers
      summary: Retrieve a list of solvers installed and available.
      responses:
        "200":
          description: A list of available solvers.
          content:
            application/json:
              schema:
                type: object
                required:
                  - parameters
                  - solvers
                properties:
                  parameters:
                    type: object
                    description: Parameters echoed back to user.
                  solvers:
                    type: object
                    description: Available solvers per ecosystem.
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                <<: *analysisResponseError

  /python-package-index:
    get:
      tags: [Python Package Index]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: list_python_package_indexes
      summary: List registered Python package indexes.
      parameters:
        - name: secret
          in: query
          required: true
          description: A secret to obtain Thoth's deployment information.
          schema:
            type: string
      responses:
        "200":
          description: Listing of available Python package indexes.
          content:
            application/json:
              schema:
                type: object
                required:
                  - enabled
                  - disabled
                properties:
                  enabled:
                    $ref: "#/components/schemas/PythonPackageIndexes"
                  disabled:
                    $ref: "#/components/schemas/PythonPackageIndexes"

  /dependency-monkey/python:
    post:
      tags: [Python Dependency Monkey]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: post_dependency_monkey_python
      summary: Run Dependency Monkey on the given application stack.
      requestBody:
        required: true
        description: Specification of Python application stack with Context to Amun.
        content:
          application/json:
            schema:
              x-body-name: input
              type: object
              required:
                - 'requirements'
                - 'context'
              properties:
                requirements:
                  type: object
                  description: Direct dependencies for the application stack.
                  example:
                    {
                      "source": [
                      ],
                      "packages": {
                        "tensorflow": "*"
                      },
                      "requires": {
                        "python_version": "3.6"
                      }
                    }
                pipeline:
                  type: object
                  description: Resolver pipeline configuration.
                  example:
                    boots:
                      - name: "UbiBoot"
                        configuration: {}
                    sieves:
                      - name: "CutLockedSieve"
                        configuration: {}
                      - name: "CutPreReleasesSieve"
                        configuration: {}
                      - name: "PackageIndexSieve"
                        configuration: {}
                      - name: "SolvedSieve"
                        configuration:
                          without_error: true
                      - name: "FilterIndexSieve"
                        configuration:
                          package_name: "tensorflow"
                          index_url:
                            - "https://pypi.org/simple"
                            - "https://tensorflow.pypi.thoth-station.ninja/index/manylinux2010/AVX2/simple"
                    steps: []
                    strides: []
                    wraps: []
                predictor:
                  type: string
                  description: Name of the predictor to be used.
                  example: "AUTO"
                predictor_config:
                  type: object
                  description: Predictor specific configuration passed.
                  example: {}
                runtime_environment:
                  type: object
                  description: Runtime environment used as a hint for resolver.
                  example:
                    {
                      "operating_system": {
                        "name": "rhel",
                        "version": "8"
                      },
                      "hardware": {
                        "cpu_family": 5,
                        "cpu_model": 5
                      },
                      "python_version": "3.6",
                      "platform": "linux-x86_64"
                    }
                context:
                  type: object
                  required:
                    - base
                  properties:
                    base:
                      type: string
                      description: Base image to build stack upon.
                      example: quay.io/thoth-station/s2i-thoth-ubi8-py36
                    identifier:
                      type: string
                      description: Identifier to be used for inspection jobs.
                      example: test
                    python_packages:
                      type: array
                      example: [pipenv]
                      description: Python packages to be installed from PyPI.
                      items:
                        type: string
                    packages:
                      type: array
                      example: [which]
                      description: Packages to be installed.
                      items:
                        type: string
                    package_manager:
                      type: string
                      description: Package manager to be used for installing dependencies.
                      enum:
                        - micropipenv
                        - pipenv
                      default: micropipenv
                    batch_size:
                      type: integer
                      default: 1
                      example: 1
                      description: Number of inspection runs
                    build:
                      type: object
                      description: Buildtime requirements and requests.
                      required:
                        - requests
                      properties:
                        requests:
                          type: object
                          description: Requests for hardware.
                          required:
                            - cpu
                            - memory
                          properties:
                            cpu:
                              type: string
                              description: CPU requests.
                              example: "1"
                            memory:
                              type: string
                              description: Memoery requests.
                              example: 1Gi
                            hardware:
                              type: object
                              description: Set hardware requirements for run time.
                              required:
                                - cpu_family
                                - cpu_model
                                - processor
                              properties:
                                cpu_family:
                                  type: integer
                                  description: CPU family number from CPU proc info.
                                  example: 6
                                cpu_model:
                                  type: integer
                                  description: Model number of CPU from CPU proc info.
                                  example: 94
                                physical_cpus:
                                  type: integer
                                  description: Number of physical CPUs.
                                  example: 32
                                processor:
                                  type: string
                                  description: Name of the CPU model name of CPU proc info.
                                  example: "Intel Core Processor (Skylake, IBRS)"
                    run:
                      type: object
                      description: Runtime requirements and requests.
                      required:
                        - requests
                      properties:
                        requests:
                          type: object
                          description: Requests for hardware.
                          required:
                            - cpu
                            - memory
                          properties:
                            cpu:
                              type: string
                              description: CPU requests.
                              example: "1"
                            memory:
                              type: string
                              description: Memoery requests.
                              example: 1Gi
                            hardware:
                              type: object
                              description: Set hardware requirements for run time.
                              required:
                                - cpu_family
                                - cpu_model
                                - processor
                              properties:
                                cpu_family:
                                  type: integer
                                  description: CPU family number from CPU proc info.
                                  example: 6
                                cpu_model:
                                  type: integer
                                  description: Model number of CPU from CPU proc info.
                                  example: 94
                                physical_cpus:
                                  type: integer
                                  description: Number of physical CPUs.
                                  example: 32
                                processor:
                                  type: string
                                  description: Name of the CPU model name of CPU proc info.
                                  example: "Intel Core Processor (Skylake, IBRS)"
                    script:
                      type: string
                      description: A script to validate stack with or URL to script to be used.
                      example: https://raw.githubusercontent.com/thoth-station/performance/master/tensorflow/conv2d.py
      parameters:
        - name: seed
          in: query
          description: A seed to be used for generating software stack samples.
          schema:
            type: integer
          required: false
        - name: dry_run
          in: query
          schema:
            type: boolean
            default: false
          description:
            Do not generate software stacks, just report how many software
            stacks will be generated.
        - name: decision
          in: query
          schema:
            type: string
            items:
              type: string
            enum:
              - random
              - all
            default: all
          required: false
          description:
            A decision function that should be used for generating software
            stack samples; if omitted, all software stacks will be created.
        - name: count
          in: query
          schema:
            type: integer
            default: 1
          required: false
          description: Number of stacks that should be generated.
        - name: limit_latest_versions
          in: query
          schema:
            type: integer
          required: false
          description: Limit number of packages considering only specific number of versions for each package.
        - name: debug
          in: query
          required: false
          description: >
            Run the given analysis in a verbose mode so developers can debug it.
          schema:
            type: boolean
            default: false
      responses:
        "202":
          description: The Dependency Monkey analysis is scheduled.
          content:
            application/json:
              schema:
                type: object
                description: Response for a submitted analysis.
                properties:
                  analysis_id:
                    type: string
                    description: >
                      An id of submitted analysis for checking its status and its results.
                  parameters:
                    type: object
                    description: >
                      Parameters echoed back to user (with default parameters if omitted).
                  cached:
                    type: boolean
                    description: >
                      If set to true the given analysis was picked from cache.
                required:
                  - analysis_id
                  - parameters
                  - cached
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                <<: *analysisResponseError

  /dependency-monkey/python/{analysis_id}/log:
    get:
      tags: [Python Dependency Monkey]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: get_dependency_monkey_python_log
      summary: Retrieve a Dependency Monkey run log.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of analysis for which log should be retrieved.
          schema:
            type: string
      responses:
        "200":
          description: Retrieved Dependency Monkey log.
          content:
            application/json:
              schema:
                type: object
                required:
                  - log
                  - parameters
                properties:
                  log:
                    type: string
                    description: Analyzer logs printed to stdout/stderr as a plain text.
                    nullable: true
                  parameters:
                    type: object
                    description: Parameters echoed back to user for debugging.
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                <<: *analysisResponseError
        "404":
          description: The given Dependency Monkey log does not exist.
          content:
            application/json:
              schema:
                <<: *analysisResponseError

  /dependency-monkey/python/{analysis_id}/status:
    get:
      tags: [Python Dependency Monkey]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: get_dependency_monkey_python_status
      summary: Show status of a Dependency Monkey run.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of requested Dependency Monkey run.
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                <<: *analysisStatus
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                <<: *analysisResponseError

  /dependency-monkey/python/{analysis_id}/report:
    get:
      tags: [Python Dependency Monkey]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: get_dependency_monkey_report
      summary: Get report of a dependency monkey run.
      parameters:
        - name: analysis_id
          in: path
          required: true
          description: An id of requested Dependency Monkey run.
          schema:
            type: string
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                description: Report of a dependency monkey run.
                required:
                  - report
                  - parameters
                properties:
                  report:
                    type: object
                    description: Report of a Dependency Monkey run.
                  parameters:
                    type: object
                    description: Parameters echoed back to user.
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                <<: *analysisResponseError

  /python/package-index/register:
    post:
      tags: [Python Package Index]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: post_register_python_package_index
      summary: Register the given Python package index.
      parameters:
        - name: secret
          in: query
          required: true
          description: A secret to register the given Python package index.
          schema:
            type: string
        - name: enabled
          in: query
          required: false
          description: Enable the given Python package index in Thoth's database.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Python package index configuration to be registered.
        required: true
        content:
          application/json:
            schema:
              x-body-name: index
              type: object
              description: A Python package index.
              required:
                - url
                - warehouse_api_url
                - verify_ssl
              properties:
                url:
                  type: string
                  description: URL to the Python simple repository as described in PEP 503.
                  example: http://pypi.org/simple
                warehouse_api_url:
                  type: string
                  description: URL to the warehouse API.
                  example: https://pypi.org/pypi
                verify_ssl:
                  type: boolean
                  description: Use secured connection to warehouse.
                  example: true
      responses:
        "201":
          description: The given Python package index was registered.
        "400":
          description: On invalid request.

  /python/package-index/state:
    post:
      tags: [Python Package Index]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: post_set_python_package_index_state
      summary: Enable or disable the given Python package index.
      parameters:
        - name: secret
          in: query
          required: true
          description: A secret to adjust the given Python package index.
          schema:
            type: string
        - name: index_url
          in: query
          required: true
          description: A secret to register the given Python package index.
          schema:
            type: string
            example: "https://pypi.org/simple"
        - name: enabled
          in: query
          required: true
          description: Enable or disable the given Python package index in Thoth's database.
          schema:
            type: boolean
            default: false
      responses:
        "201":
          description: The state was adjusted.
        "400":
          description: On invalid request.
        "404":
          description: If the given Python package index was not found.

  /analyze:
    post:
      tags: ["Image Analysis"]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: post_analyze
      summary: |
        Analyze the given image asynchronously, image is marked as an internal
        container image that can be used during recommendations.
      parameters:
        - name: secret
          in: query
          required: true
          description: A secret to adjust the given Python package index.
          schema:
            type: string
        - name: image
          in: query
          required: true
          description: >
            Name of image - can also specify remote registry to pull
            image from.
          schema:
            type: string
        - name: registry_user
          in: query
          required: false
          description: >
            Registry user to be used for pulling images from registry.
          schema:
            type: string
        - name: registry_password
          in: query
          required: false
          description: >
            Registry password or token to be used for pulling images from
            registry.
          schema:
            type: string
        - name: environment_type
          in: query
          required: false
          description: >
            Type of environment (runtime or buildtime) which is being analyzed.
          schema:
            type: string
            enum:
              - buildtime
              - runtime
            default: runtime
        - name: origin
          in: query
          required: false
          description: >
            A remote where the image is being used. This is used for tracking as well as
            for automated reporting when results are available.
          schema:
            type: string
        - name: is_external
          in: query
          required: false
          description: >
            Verify if the image is not from thoth-station ecosystem.
          schema:
            type: boolean
            default: false
        - name: debug
          in: query
          required: false
          description: >
            Run the given analyzer in a verbose mode so developers can debug
            analyzer.
          schema:
            type: boolean
            default: false
        - name: verify_tls
          in: query
          required: false
          description: >
            Verify TLS certificates of registry from where images are
            pulled from.
          schema:
            type: boolean
            default: true
      responses:
        "202":
          description: Successful response with analyzer id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponse"
        "400":
          description: On invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalysisResponseError"

  /graph/performance-indicators:
    get:
      tags: [Graph]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: get_performance_indicators
      summary: List registered performance indicators in the current Thoth deployment
      responses:
        "200":
          description: A list of available performance indicators

  /graph/initialize:
    put:
      tags: [Graph]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: initialize_schema
      summary: Schedule a graph update schema job for initialization procedure in graph.
      parameters:
        - name: secret
          in: query
          required: true
          description: A secret to authorize operation.
          schema:
            type: string
      responses:
        "201":
          description: Graph update schema job was scheduled.
        "401":
          description: On invalid secret.
        "500":
          description: On server side errors.

  /graph/refresh:
    post:
      tags: [Graph]
      x-openapi-router-controller: thoth.management_api.api_v1
      operationId: schedule_graph_refresh
      summary: Schedule a graph refresh job to solve unsolved Python packages.
      parameters:
        - name: secret
          in: query
          required: true
          description: A secret to schedule the job.
          schema:
            type: string
      responses:
        "201":
          description: Graph refresh job was scheduled.
        "400":
          description: On invalid request.
        "401":
          description: On invalid secret.

components:
  schemas:
    Info:
      type: object
      description: Information about Thoth deployment.
      properties:
        deployment_name:
          type: string
          description: Name of deployment.
          example: "staging"
        version:
          type: string
          description: Version of Thoth components deployed. A special value @dev signalizes a developer's build.
          example: "master"
        s3_endpoint_url:
          type: string
          description: S3 endpoint used for storing results.
          example: "https://s3.redhat.com/"
        s3_bucket_prefix:
          type: string
          description: Bucket prefix used when storing results on S3 compatible API (Ceph).
          example: "data/thoth"
        knowledge_graph_host:
          type: string
          description: Knowledge Graph instance to which the deployment talks to.
          example: "knowledge_graph_host.thoth-station.ninja"
        amun_api_url:
          type: string
          description: Amun API host to which this deployment talks to (set to null if no Amun deployment is used).
          example: "https://amun-api.thoth.redhat.com/"
          nullable: true
        frontend_namespace:
          type: string
          description: Frontend namespace name.
          example: "thoth-frontend-staging"
        middletier_namespace:
          type: string
          description: Frontend namespace name.
          example: "thoth-middletier-staging"
        backend_namespace:
          type: string
          description: Frontend namespace name.
          example: "thoth-backend-staging"
    PythonPackageIndexes:
      type: array
      description: A listing of Python package indexes.
      items:
        type: object
        description: A Python package index.
        required:
          - url
          - warehouse_api_url
          - verify_ssl
        properties:
          url:
            type: string
            description: URL to the Python simple repository as described in PEP 503.
            example: http://pypi.org/simple
          warehouse_api_url:
            type: string
            description: URL to the warehouse API.
            example: https://pypi.org/pypi
            nullable: true
          verify_ssl:
            type: boolean
            description: Use secured connection to warehouse.
            example: true
    AnalysisResponse:
      type: object
      description: Response for a submitted analysis.
      properties:
        analysis_id:
          type: string
          description: >
            An id of submitted analysis for checking its status and its results.
        parameters:
          type: object
          description: >
            Parameters echoed back to user (with default parameters if omitted).
      required:
        - analysis_id
        - parameters
    AnalysisResponseError:
      type: object
      required:
        - error
        - parameters
      properties:
        error:
          type: string
          description: Error information for user.
        parameters:
          type: object
          description: Parameters echoed back to user for debugging.
    HardwareEnvironmentResponseError:
      type: object
      required:
        - error
        - parameters
      properties:
        error:
          type: string
          description: Error information for user.
        parameters:
          type: object
          description: Parameters echoed back to user for debugging.
    HardwareEnvironment:
      type: object
      description: Available hardware environment configuration.
      properties:
        cpu_cores:
          type: integer
          description: Number of cores of the CPU.
          example: 2
          nullable: true
        cpu_family:
          type: integer
          description: The CPU family.
          example: 6
          nullable: true
        cpu_model:
          type: integer
          description: The CPU model.
          example: 94
          nullable: true
        cpu_model_name:
          type: string
          description: The CPU model name.
          example: "Intel"
          nullable: true
        cpu_physical_cpus:
          type: integer
          description: The CPU physical CPUs.
          example: 6
          nullable: true
        cpu_vendor:
          type: integer
          description: The CPU vendor.
          example: 1
          nullable: true
        gpu_cores:
          type: integer
          description: Number of cores of the GPU.
          example: 8
          nullable: true
        gpu_memory_size:
          type: integer
          description: The GPU memory size.
          example: 8
          nullable: true
        gpu_model_name:
          type: string
          description: The GPU model name.
          example: null
          nullable: true
        gpu_vendor:
          type: string
          description: The GPU vendor.
          example: "Gigabyte"
          nullable: true
        ram_size:
          type: integer
          description: The RAM size.
          example: 16
          nullable: true
    HardwareEnvironmentWithId:
      type: object
      additionalProperties: true
      description: Available hardware environment configuration.
      properties:
        id:
          type: integer
          description: Identifier of the given hardware environment configuration.
          example: 42
          nullable: false
        cpu_cores:
          type: integer
          description: Number of cores of the CPU.
          example: 2
          nullable: true
        cpu_family:
          type: integer
          description: The CPU family.
          example: 6
          nullable: true
        cpu_model:
          type: integer
          description: The CPU model.
          example: 94
          nullable: true
        cpu_model_name:
          type: string
          description: The CPU model name.
          example: "Intel"
          nullable: true
        cpu_physical_cpus:
          type: integer
          description: The CPU physical CPUs.
          example: 6
          nullable: true
        cpu_vendor:
          type: integer
          description: The CPU vendor.
          example: 1
          nullable: true
        gpu_cores:
          type: integer
          description: Number of cores of the GPU.
          example: 8
          nullable: true
        gpu_memory_size:
          type: integer
          description: The GPU memory size.
          example: 8
          nullable: true
        gpu_model_name:
          type: string
          description: The GPU model name.
          example: null
          nullable: true
        gpu_vendor:
          type: string
          description: The GPU vendor.
          example: "Gigabyte"
          nullable: true
        ram_size:
          type: integer
          description: The RAM size.
          example: 16
          nullable: true
